// src/string-template-renderer/jsx-elem-to-strings.ts
import { ComponentApi } from "../component-api/component-api.mjs";
import { ErrorBoundary } from "../error-boundary/error-boundary.mjs";
import { createElement } from "../jsx-runtime.mjs";
import { SELF_CLOSING_TAG_LIST } from "../utilities/self-closing-tag-list.mjs";
import { Interpolate, InterpolateTag } from "./interpolate.mjs";
import { mapAttributeName } from "./map-attribute-name.mjs";
import { resolveElement } from "./resolve-element.mjs";
import { toTemplateStringArray } from "./to-template-string-array.mjs";
function assertSyncElem(e) {
}
var concatToLastStringOrPush = (a, s) => {
  if (s) {
    if (a[0][a[0].length - 1] !== void 0) {
      a[0][a[0].length - 1] += s;
    } else {
      a[0].push(s);
    }
  }
};
var jsxElemToTagFuncArgsSync = (element, options, _componentApi = ComponentApi.create()) => {
  switch (typeof element) {
    case "string":
      return [["", ""], [element]];
    case "bigint":
    case "number":
      return [["", ""], [String(element)]];
    case "boolean":
    case "function":
    case "symbol":
    case "undefined":
      return [["", ""], [""]];
  }
  if (element === null)
    return [["", ""], [""]];
  const { attributeMap = {} } = options;
  const componentApi = _componentApi ? ComponentApi.clone(_componentApi) : ComponentApi.create({ attributeMap });
  assertSyncElem(element);
  if (element.type === "textNode") {
    return [["", ""], [element.text]];
  }
  if (typeof element.tag !== "string") {
    if (ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = boundary.render(
          element.props,
          componentApi
        );
        if (subElem2 instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.render] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToTagFuncArgsSync(subElem2, options, componentApi);
      } catch (e) {
        const fallbackElem = boundary.onError(
          e,
          element.props,
          componentApi
        );
        if (fallbackElem instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.onError] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToTagFuncArgsSync(fallbackElem, options, componentApi);
      }
    }
    if (Interpolate._isInterpolate(element.tag)) {
      const results = [[], []];
      results[0].push("", "");
      results[1].push(element.props.children);
      return results;
    }
    if (InterpolateTag._isInterpolateRender(element.tag)) {
      const results = [[], []];
      const [tmpTsa, params] = jsxElemToTagFuncArgsSync(
        createElement("", element.props),
        options
      );
      const templateStringArray = toTemplateStringArray(tmpTsa);
      results[0].push("", "");
      results[1].push(options.tag(templateStringArray, ...params));
      return results;
    }
    const subElem = element.tag(
      element.props,
      componentApi
    );
    if (subElem instanceof Promise) {
      throw new Error(
        `Encountered an async Component: [${element.tag.name}] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
      );
    }
    return jsxElemToTagFuncArgsSync(subElem, options, componentApi);
  } else {
    const { attributes, children } = resolveElement(element);
    if (element.tag === "") {
      const results = [[], []];
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        const [[first, ...strings], tagParams] = jsxElemToTagFuncArgsSync(
          child,
          options,
          componentApi
        );
        concatToLastStringOrPush(results, first);
        results[0] = results[0].concat(strings);
        results[1] = results[1].concat(tagParams);
      }
      return results;
    } else {
      const isSelfClosingTag = children.length === 0 && SELF_CLOSING_TAG_LIST.includes(element.tag);
      const results = [[], []];
      results[0].push(`<${element.tag}`);
      const attrList = Object.entries(attributes);
      for (let index = 0; index < attrList.length; index++) {
        const [attrName, value] = attrList[index];
        if (value === false || value === null || value === void 0) {
          continue;
        }
        concatToLastStringOrPush(
          results,
          ` ${mapAttributeName(attrName, attributeMap)}="`
        );
        results[1].push(value === true ? attrName : value);
        results[0].push('"');
      }
      if (isSelfClosingTag) {
        concatToLastStringOrPush(results, "/>");
      } else {
        concatToLastStringOrPush(results, ">");
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          const [[first, ...strings], tagParams] = jsxElemToTagFuncArgsSync(
            child,
            options,
            componentApi
          );
          concatToLastStringOrPush(results, first);
          results[0] = results[0].concat(strings);
          results[1] = results[1].concat(tagParams);
        }
        concatToLastStringOrPush(results, `</${element.tag}>`);
      }
      return results;
    }
  }
};
export {
  jsxElemToTagFuncArgsSync
};
