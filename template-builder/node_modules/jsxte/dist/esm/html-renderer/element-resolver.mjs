// src/html-renderer/element-resolver.ts
import { mapAttributeName } from "../string-template-renderer/map-attribute-name.mjs";
var HTMLElementResolver = class {
  constructor(attributeMap) {
    this.attributeMap = {};
    this.attributeMap = attributeMap;
  }
  resolveAttributes(element) {
    const attributes = [];
    const entries = Object.entries(element.props);
    for (let i = 0; i < entries.length; i++) {
      const [key, prop] = entries[i];
      if (key !== "children") {
        attributes.push([mapAttributeName(key, this.attributeMap), prop]);
      }
    }
    return attributes;
  }
  resolveChildren(element) {
    if (!element.props.children)
      return [];
    if (Array.isArray(element.props.children))
      return element.props.children;
    return [element.props.children];
  }
  resolveElement(element) {
    const children = this.resolveChildren(element);
    const attributes = this.resolveAttributes(element);
    return {
      tag: element.tag.toString(),
      children,
      attributes
    };
  }
};
export {
  HTMLElementResolver
};
