type GetArrayFromUnion<U> = Exclude<U, Exclude<U, Array<any>>>;
type GetNonArraysFromUnion<U> = Exclude<U, Array<any>>;
type ArrayType<A> = A extends Array<infer T> ? T : never;
type AsArray<T> = [GetArrayFromUnion<T>] extends [never] ? GetNonArraysFromUnion<T>[] : Array<ArrayType<GetArrayFromUnion<T>> | GetNonArraysFromUnion<T>>;
export declare function asArray<T>(v: T): AsArray<T>;
export declare const resolveElement: (element: JSXTE.TagElement) => {
    attributes: {
        [k: string]: any;
    };
    children: JSX.Element[];
};
export {};
