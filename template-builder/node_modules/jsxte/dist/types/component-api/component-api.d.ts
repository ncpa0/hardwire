import { type RendererInternalOptions } from "../html-renderer/jsx-elem-to-html";
import { type JsxteJson } from "../json-renderer/jsx-elem-to-json";
export declare class ContextAccessor {
    private map;
    static clone(original: ContextAccessor): ContextAccessor;
    constructor(map?: Map<symbol, unknown>);
    /**
     * Retrieve the context data for the specified context. If the context has
     * never been set by any of this component ancestors an error will be thrown.
     */
    getOrFail<T>(ref: ContextDefinition<T>): T;
    /**
     * Retrieve the context data for the specified context.
     */
    get<T>(ref: ContextDefinition<T>): T | undefined;
    /**
     * Partially update the state of the context data. Works only for objects and
     * can only be used if some context data is already set beforehand.
     *
     * Updates to the context made with this method are only visible to this
     * component and it's descendants.
     */
    update<T extends object>(ref: ContextDefinition<T>, updateData: Partial<T>): void;
    /**
     * Sets the context data for the specified context.
     *
     * Changes to the context made with this method are only visible to this
     * component and it's descendants.
     */
    set<T>(ref: ContextDefinition<T>, data: T): void;
    /**
     * Check if the context data for the specified context is set.
     */
    has<T>(ref: ContextDefinition<T>): boolean;
}
export declare class ComponentApi {
    private attributeMap?;
    static create(options?: RendererInternalOptions): ComponentApi;
    static clone(original: ComponentApi): ComponentApi;
    /**
     * Access to the current context data.
     */
    ctx: ContextAccessor;
    private constructor();
    /**
     * Renders the given JSX component to pure html as if it was a child of this
     * component. All context available to this component will be available to the
     * given component as well.
     */
    render(component: JSX.Element): string;
    renderAsync(component: JSX.Element | Promise<JSX.Element>): Promise<string>;
    renderToJson(component: JSX.Element): JsxteJson | string;
    renderToJsonAsync(component: JSX.Element | Promise<JSX.Element>): Promise<JsxteJson | string>;
}
export declare class ContextDefinition<T> {
    id: symbol;
    Provider: (props: JSXTE.PropsWithChildren<{
        value: T;
    }>, componentApi: ComponentApi) => JSX.Element;
    Consumer: (props: JSXTE.PropsWithChildren<{
        render: (value?: T) => JSX.Element;
    }>, componentApi: ComponentApi) => JSX.Element;
}
export declare const defineContext: <T = unknown>() => ContextDefinition<T>;
