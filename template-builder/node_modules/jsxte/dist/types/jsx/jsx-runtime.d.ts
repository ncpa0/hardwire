import type { ComponentApi } from "../component-api/component-api";
type CreateElementProps = {
    [k: string]: any;
    children?: JSXTE.ElementChildren;
};
declare global {
    interface SymbolConstructor {
        /**
         * Method under this property defines how an object should be converted to
         * HTML by the JSXTE renderer.
         *
         * @example
         *   class User {
         *     constructor(
         *       public firstname: string,
         *       public lastname: string,
         *       public email: string,
         *       public age: number,
         *     ) {}
         *
         *     [Symbol.toHtmlTag]() {
         *       return `${this.firstname} ${this.lastname}`;
         *     }
         *   }
         *
         *   const user = new User("John", "Doe", "joedoe@gmai.com", 26);
         *   renderToHtml(<div>{user}</div>); // => <div>John Doe</div>
         */
        readonly toHtmlTag: symbol;
    }
}
export declare const createElement: (tag: string | ((props: any, contextMap: ComponentApi) => JSX.Element) | ((props: any, contextMap: ComponentApi) => Promise<JSX.Element>), props?: CreateElementProps, ...children: Array<JSX.Element | string | number | Array<JSX.Element | string | number>>) => JSX.Element;
export declare const jsx: (tag: string | ((props: any, contextMap: ComponentApi) => JSX.Element) | ((props: any, contextMap: ComponentApi) => Promise<JSX.Element>), props?: CreateElementProps, ...children: Array<JSX.Element | string | number | Array<JSX.Element | string | number>>) => JSX.Element;
export declare const jsxs: (tag: string | ((props: any, contextMap: ComponentApi) => JSX.Element) | ((props: any, contextMap: ComponentApi) => Promise<JSX.Element>), props?: CreateElementProps, ...children: Array<JSX.Element | string | number | Array<JSX.Element | string | number>>) => JSX.Element;
export declare const _jsx: (tag: string | ((props: any, contextMap: ComponentApi) => JSX.Element) | ((props: any, contextMap: ComponentApi) => Promise<JSX.Element>), props?: CreateElementProps, ...children: Array<JSX.Element | string | number | Array<JSX.Element | string | number>>) => JSX.Element;
export declare const _jsxs: (tag: string | ((props: any, contextMap: ComponentApi) => JSX.Element) | ((props: any, contextMap: ComponentApi) => Promise<JSX.Element>), props?: CreateElementProps, ...children: Array<JSX.Element | string | number | Array<JSX.Element | string | number>>) => JSX.Element;
export declare const Fragment = "";
export declare const _Fragment = "";
export {};
