"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/html-renderer/element-resolver.ts
var element_resolver_exports = {};
__export(element_resolver_exports, {
  HTMLElementResolver: () => HTMLElementResolver
});
module.exports = __toCommonJS(element_resolver_exports);
var import_map_attribute_name = require("../string-template-renderer/map-attribute-name.js");
var HTMLElementResolver = class {
  constructor(attributeMap) {
    this.attributeMap = {};
    this.attributeMap = attributeMap;
  }
  resolveAttributes(element) {
    const attributes = [];
    const entries = Object.entries(element.props);
    for (let i = 0; i < entries.length; i++) {
      const [key, prop] = entries[i];
      if (key !== "children") {
        attributes.push([(0, import_map_attribute_name.mapAttributeName)(key, this.attributeMap), prop]);
      }
    }
    return attributes;
  }
  resolveChildren(element) {
    if (!element.props.children)
      return [];
    if (Array.isArray(element.props.children))
      return element.props.children;
    return [element.props.children];
  }
  resolveElement(element) {
    const children = this.resolveChildren(element);
    const attributes = this.resolveAttributes(element);
    return {
      tag: element.tag.toString(),
      children,
      attributes
    };
  }
};
