"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/string-template-renderer/default-cache.ts
var default_cache_exports = {};
__export(default_cache_exports, {
  DefaultTemplateArrayCache: () => DefaultTemplateArrayCache
});
module.exports = __toCommonJS(default_cache_exports);
var arrIsEqual = (a, b) => {
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (a[i] !== b[i])
      return false;
  return true;
};
var DefaultTemplateArrayCache = class {
  constructor() {
    this.entries = [];
  }
  set(templateArray) {
    this.entries.push(templateArray);
  }
  get(templateArray) {
    for (let i = 0; i < this.entries.length; i++) {
      if (arrIsEqual(this.entries[i], templateArray)) {
        return this.entries[i];
      }
    }
    return void 0;
  }
  clear() {
    this.entries = [];
  }
};
