"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/string-template-renderer/render-to-string-template-tag.ts
var render_to_string_template_tag_exports = {};
__export(render_to_string_template_tag_exports, {
  renderToStringTemplateTag: () => renderToStringTemplateTag
});
module.exports = __toCommonJS(render_to_string_template_tag_exports);
var import_jsx_elem_to_strings = require("./jsx-elem-to-strings.cjs");
var import_to_template_string_array = require("./to-template-string-array.cjs");
var renderToStringTemplateTag = (tag, Component, options = {}) => {
  const [tmpTsa, params] = (0, import_jsx_elem_to_strings.jsxElemToTagFuncArgsSync)(Component, {
    ...options,
    tag
  });
  const templateStringArray = (0, import_to_template_string_array.toTemplateStringArray)(tmpTsa);
  const cached = options?.cache?.get(templateStringArray);
  if (cached) {
    return tag(cached, ...params);
  }
  options?.cache?.set(templateStringArray);
  return tag(templateStringArray, ...params);
};
