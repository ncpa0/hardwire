"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/jsxte-render-error.ts
var jsxte_render_error_exports = {};
__export(jsxte_render_error_exports, {
  JsxteRenderError: () => JsxteRenderError
});
module.exports = __toCommonJS(jsxte_render_error_exports);
var mapReverse = (arr, fn) => {
  const result = [];
  for (let i = arr.length - 1; i >= 0; i--) {
    result.push(fn(arr[i]));
  }
  return result;
};
var JsxteRenderError = class _JsxteRenderError extends Error {
  constructor(message, insideTag, causedBy) {
    super(message, { cause: causedBy });
    this.baseMessage = "";
    this.parentTags = [];
    this.name = "JsxteRenderError";
    this.baseMessage = message;
    if (insideTag) {
      this.parentTags.push(insideTag);
    }
    if (this.cause == null) {
      Object.defineProperty(this, "cause", {
        value: causedBy,
        enumerable: true,
        writable: true
      });
    }
    this.message = this.generateMessage();
  }
  static is(err) {
    return err instanceof _JsxteRenderError;
  }
  pushParent(tag) {
    this.parentTags.push(tag);
    this.message = this.generateMessage();
  }
  generateMessage() {
    return `The below error has occurred in:
${mapReverse(
      this.parentTags,
      (tag) => `<${tag}>`
    ).join("\n")}

${this.baseMessage}`;
  }
};
