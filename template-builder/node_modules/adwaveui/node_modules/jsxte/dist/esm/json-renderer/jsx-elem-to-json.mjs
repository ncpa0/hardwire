// src/json-renderer/jsx-elem-to-json.ts
import { ComponentApi } from "../component-api/component-api.mjs";
import { ErrorBoundary } from "../error-boundary/error-boundary.mjs";
import { getHTMLStruct } from "../html-parser/get-html-struct.mjs";
function assertSyncElem(e) {
}
var jsxElemToJsonSync = (element, _componentApi, options) => {
  switch (typeof element) {
    case "string":
      return element;
    case "bigint":
    case "number":
      return String(element);
    case "boolean":
    case "function":
    case "symbol":
    case "undefined":
      return "";
  }
  if (element === null)
    return "";
  const attributeMap = options?.attributeMap ?? {};
  const componentApi = _componentApi ? ComponentApi.clone(_componentApi) : ComponentApi.create(options);
  assertSyncElem(element);
  if (element.type === "textNode") {
    return element.text;
  }
  if (typeof element.tag !== "string") {
    if (ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = boundary.render(
          element.props,
          componentApi
        );
        if (subElem2 instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.render] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToJsonSync(subElem2, componentApi, {
          attributeMap
        });
      } catch (e) {
        const fallbackElem = boundary.onError(e, element.props, componentApi);
        if (fallbackElem instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.onError] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToJsonSync(fallbackElem, componentApi, {
          attributeMap
        });
      }
    }
    const subElem = element.tag(
      element.props,
      componentApi
    );
    if (subElem instanceof Promise) {
      throw new Error(
        `Encountered an async Component: [${element.tag.name}] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
      );
    }
    return jsxElemToJsonSync(subElem, componentApi, {
      attributeMap
    });
  } else {
    const htmlStruct = getHTMLStruct(element, attributeMap);
    const r = {
      element: htmlStruct.tag,
      attributes: htmlStruct.attributes,
      children: []
    };
    for (let i = 0; i < htmlStruct.children.length; i++) {
      const child = htmlStruct.children[i];
      const rendered = jsxElemToJsonSync(child, componentApi, {
        attributeMap
      });
      r.children.push(rendered);
    }
    return r;
  }
};
var jsxElemToJsonAsync = async (element, _componentApi, options) => {
  switch (typeof element) {
    case "string":
      return element;
    case "bigint":
    case "number":
      return String(element);
    case "boolean":
    case "function":
    case "symbol":
    case "undefined":
      return "";
  }
  if (element === null)
    return "";
  const attributeMap = options?.attributeMap ?? {};
  const componentApi = _componentApi ? ComponentApi.clone(_componentApi) : ComponentApi.create(options);
  assertSyncElem(element);
  if (element.type === "textNode") {
    return element.text;
  }
  if (typeof element.tag !== "string") {
    if (ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = await boundary.render(
          element.props,
          componentApi
        );
        return await jsxElemToJsonAsync(subElem2, componentApi, {
          attributeMap
        });
      } catch (e) {
        const fallbackElem = await boundary.onError(
          e,
          element.props,
          componentApi
        );
        return await jsxElemToJsonAsync(fallbackElem, componentApi, {
          attributeMap
        });
      }
    }
    const subElem = await element.tag(
      element.props,
      componentApi
    );
    return await jsxElemToJsonAsync(subElem, componentApi, {
      attributeMap
    });
  } else {
    const htmlStruct = getHTMLStruct(element, attributeMap);
    const r = {
      element: htmlStruct.tag,
      attributes: htmlStruct.attributes,
      children: []
    };
    for (let i = 0; i < htmlStruct.children.length; i++) {
      const child = htmlStruct.children[i];
      const rendered = await jsxElemToJsonAsync(child, componentApi, {
        attributeMap
      });
      r.children.push(rendered);
    }
    return r;
  }
};
export {
  jsxElemToJsonAsync,
  jsxElemToJsonSync
};
