// src/utilities/cache.ts
var CacheEntry = class {
  constructor(props, value, maxAge) {
    this.value = value;
    this.maxAge = maxAge;
    this.createdAt = Date.now();
    this.props = new Map(Object.entries(props));
  }
  isExpired(now) {
    return now - this.createdAt > this.maxAge;
  }
  compareProps(propEntries) {
    if (propEntries.length !== this.props.size)
      return false;
    for (let i = 0; i < propEntries.length; i++) {
      const [key, value] = propEntries[i];
      const cachedPropValue = this.props.get(key);
      if (cachedPropValue !== value)
        return false;
    }
    return true;
  }
};
var Cache = class {
  constructor(maxAge = 15 * 60 * 1e3, maxEntries = 10) {
    this.maxAge = maxAge;
    this.maxEntries = maxEntries;
    this.lastInvalidate = Date.now();
    this.invalidationInterval = 5 * 60 * 1e3;
    this.entries = [];
    if (maxEntries < 1) {
      throw new Error("Cache maxEntries must be greater than 0");
    }
  }
  enforceEntryLimit() {
    while (this.entries.length > this.maxEntries) {
      this.entries.shift();
    }
  }
  invalidateExpired() {
    const now = Date.now();
    this.entries = this.entries.filter((entry) => !entry.isExpired(now));
  }
  get(props) {
    if (Date.now() - this.lastInvalidate > this.invalidationInterval) {
      this.lastInvalidate = Date.now();
      setTimeout(() => this.invalidateExpired(), 0);
    }
    const propsEntries = Array.from(Object.entries(props));
    const cacheEntry = this.entries.find(
      (entry) => entry.compareProps(propsEntries)
    );
    if (cacheEntry && !cacheEntry.isExpired(Date.now()))
      return cacheEntry.value;
    return void 0;
  }
  set(props, value) {
    this.entries.push(new CacheEntry(props, value, this.maxAge));
    setTimeout(() => this.enforceEntryLimit(), 0);
  }
};
export {
  Cache
};
