// src/jsx/jsx-runtime.ts
var mapChildren = (children, accumulator) => {
  switch (typeof children) {
    case "string":
      accumulator.push({ type: "textNode", text: children });
      break;
    case "number":
      accumulator.push({ type: "textNode", text: children.toString() });
      break;
    case "object":
      if (Array.isArray(children)) {
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          mapChildren(child, accumulator);
        }
      } else if (children != null) {
        accumulator.push(children);
      }
      break;
  }
  return accumulator;
};
var createElement = (tag, props, ...children) => {
  props ?? (props = {});
  const finalChildren = [];
  for (let i = 0; i < children.length; i++) {
    mapChildren(children[i], finalChildren);
  }
  if (props?.children) {
    mapChildren(props.children, finalChildren);
  }
  props.children = finalChildren;
  Object.freeze(finalChildren);
  Object.freeze(props);
  return {
    type: "tag",
    // @ts-expect-error
    tag,
    props
  };
};
var jsx = createElement;
var jsxs = jsx;
var _jsx = jsx;
var _jsxs = jsx;
var Fragment = "";
var _Fragment = Fragment;
export {
  Fragment,
  _Fragment,
  _jsx,
  _jsxs,
  createElement,
  jsx,
  jsxs
};
