"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/html-parser/jsx-elem-to-html.ts
var jsx_elem_to_html_exports = {};
__export(jsx_elem_to_html_exports, {
  jsxElemToHtmlAsync: () => jsxElemToHtmlAsync,
  jsxElemToHtmlSync: () => jsxElemToHtmlSync
});
module.exports = __toCommonJS(jsx_elem_to_html_exports);
var import_component_api = require("../component-api/component-api.js");
var import_error_boundary = require("../error-boundary/error-boundary.js");
var import_join = require("../utilities/join.js");
var import_self_closing_tag_list = require("../utilities/self-closing-tag-list.js");
var import_attribute_to_html_tag_string = require("./attribute-to-html-tag-string.js");
var import_get_html_struct = require("./get-html-struct.js");
function assertSyncElem(e) {
}
var isTextNode = (e) => typeof e === "object" && e != null && "type" in e && e.type === "textNode";
var jsxElemToHtmlSync = (element, _componentApi, options) => {
  switch (typeof element) {
    case "string":
      return element;
    case "bigint":
    case "number":
      return String(element);
    case "boolean":
    case "function":
    case "symbol":
    case "undefined":
      return "";
  }
  if (element === null)
    return "";
  const attributeMap = options?.attributeMap ?? {};
  const currentIndent = options?.currentIndent ?? 0;
  const indent = options?.indent ?? 2;
  const componentApi = _componentApi ? import_component_api.ComponentApi.clone(_componentApi) : import_component_api.ComponentApi.create(options);
  assertSyncElem(element);
  if (element.type === "textNode") {
    const indentPadding = " ".repeat(currentIndent);
    return indentPadding + element.text;
  }
  if (typeof element.tag !== "string") {
    if (import_error_boundary.ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = boundary.render(
          element.props,
          componentApi
        );
        if (subElem2 instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.render] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToHtmlSync(subElem2, componentApi, {
          indent,
          currentIndent,
          attributeMap
        });
      } catch (e) {
        const fallbackElem = boundary.onError(e, element.props, componentApi);
        if (fallbackElem instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.onError] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToHtmlSync(fallbackElem, componentApi, {
          indent,
          currentIndent,
          attributeMap
        });
      }
    }
    const subElem = element.tag(
      element.props,
      componentApi
    );
    if (subElem instanceof Promise) {
      throw new Error(
        `Encountered an async Component: [${element.tag.name}] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
      );
    }
    return jsxElemToHtmlSync(subElem, componentApi, {
      indent,
      currentIndent,
      attributeMap
    });
  } else {
    const htmlStruct = (0, import_get_html_struct.getHTMLStruct)(element, attributeMap);
    if (htmlStruct.tag === "") {
      const results = [];
      for (let i = 0; i < htmlStruct.children.length; i++) {
        const child = htmlStruct.children[i];
        const renderedChild = jsxElemToHtmlSync(child, componentApi, {
          indent,
          currentIndent: currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          results.push(renderedChild);
      }
      return (0, import_join.join)(results);
    } else {
      const isSelfClosingTag = htmlStruct.children.length === 0 && import_self_closing_tag_list.SELF_CLOSING_TAG_LIST.includes(htmlStruct.tag);
      const inlineTag = htmlStruct.children.length === 0 || htmlStruct.children.every(isTextNode);
      const indentPadding = " ".repeat(currentIndent);
      const attrString = (0, import_join.join)(
        (0, import_attribute_to_html_tag_string.mapAttributesToHtmlTagString)(htmlStruct.attributes),
        " "
      );
      const separator = attrString.length ? " " : "";
      if (isSelfClosingTag) {
        return `${indentPadding}<${htmlStruct.tag}` + separator + (0, import_join.join)((0, import_attribute_to_html_tag_string.mapAttributesToHtmlTagString)(htmlStruct.attributes), " ") + separator + "/>";
      }
      const startTag = `${indentPadding}<${htmlStruct.tag}` + separator + (0, import_join.join)((0, import_attribute_to_html_tag_string.mapAttributesToHtmlTagString)(htmlStruct.attributes), " ") + ">";
      const endTag = `${inlineTag ? "" : indentPadding}</${htmlStruct.tag}>`;
      const children = [];
      for (let i = 0; i < htmlStruct.children.length; i++) {
        const child = htmlStruct.children[i];
        const renderedChild = jsxElemToHtmlSync(child, componentApi, {
          indent: inlineTag ? 0 : indent,
          currentIndent: inlineTag ? 0 : currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          children.push(renderedChild);
      }
      if (inlineTag) {
        return startTag + (0, import_join.join)(children, "") + endTag;
      }
      return (0, import_join.join)([startTag, ...children, endTag]);
    }
  }
};
var jsxElemToHtmlAsync = async (element, _componentApi, options) => {
  switch (typeof element) {
    case "string":
      return element;
    case "bigint":
    case "number":
      return String(element);
    case "boolean":
    case "function":
    case "symbol":
    case "undefined":
      return "";
  }
  if (element === null)
    return "";
  const { attributeMap = {}, currentIndent = 0, indent = 2 } = options ?? {};
  const componentApi = _componentApi ? import_component_api.ComponentApi.clone(_componentApi) : import_component_api.ComponentApi.create(options);
  assertSyncElem(element);
  if (element.type === "textNode") {
    const indentPadding = " ".repeat(currentIndent);
    return indentPadding + element.text;
  }
  if (typeof element.tag !== "string") {
    if (import_error_boundary.ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = await boundary.render(
          element.props,
          componentApi
        );
        return await jsxElemToHtmlAsync(subElem2, componentApi, {
          indent,
          currentIndent,
          attributeMap
        });
      } catch (e) {
        const fallbackElem = await boundary.onError(
          e,
          element.props,
          componentApi
        );
        return await jsxElemToHtmlAsync(fallbackElem, componentApi, {
          indent,
          currentIndent,
          attributeMap
        });
      }
    }
    const subElem = await element.tag(
      element.props,
      componentApi
    );
    return await jsxElemToHtmlAsync(subElem, componentApi, {
      indent,
      currentIndent,
      attributeMap
    });
  } else {
    const htmlStruct = (0, import_get_html_struct.getHTMLStruct)(element, attributeMap);
    if (htmlStruct.tag === "") {
      const results = [];
      for (let i = 0; i < htmlStruct.children.length; i++) {
        const child = htmlStruct.children[i];
        const renderedChild = await jsxElemToHtmlAsync(child, componentApi, {
          indent,
          currentIndent: currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          results.push(renderedChild);
      }
      return (0, import_join.join)(results);
    } else {
      const isSelfClosingTag = htmlStruct.children.length === 0 && import_self_closing_tag_list.SELF_CLOSING_TAG_LIST.includes(htmlStruct.tag);
      const inlineTag = htmlStruct.children.length === 0 || htmlStruct.children.every(isTextNode);
      const indentPadding = " ".repeat(currentIndent);
      const attrString = (0, import_join.join)(
        (0, import_attribute_to_html_tag_string.mapAttributesToHtmlTagString)(htmlStruct.attributes),
        " "
      );
      const separator = attrString.length ? " " : "";
      if (isSelfClosingTag) {
        return `${indentPadding}<${htmlStruct.tag}` + separator + (0, import_join.join)((0, import_attribute_to_html_tag_string.mapAttributesToHtmlTagString)(htmlStruct.attributes), " ") + separator + "/>";
      }
      const startTag = `${indentPadding}<${htmlStruct.tag}` + separator + attrString + ">";
      const endTag = `${inlineTag ? "" : indentPadding}</${htmlStruct.tag}>`;
      const children = [];
      for (let i = 0; i < htmlStruct.children.length; i++) {
        const child = htmlStruct.children[i];
        const renderedChild = await jsxElemToHtmlAsync(child, componentApi, {
          indent: inlineTag ? 0 : indent,
          currentIndent: inlineTag ? 0 : currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          children.push(renderedChild);
      }
      if (inlineTag) {
        return startTag + (0, import_join.join)(children, "") + endTag;
      }
      return (0, import_join.join)([startTag, ...children, endTag]);
    }
  }
};
