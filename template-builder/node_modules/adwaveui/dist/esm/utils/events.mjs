var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/utils/events.ts
var CustomMouseEvent = class extends CustomEvent {
  constructor(name, detail, base) {
    super(name, {
      detail,
      bubbles: true,
      cancelable: true
    });
    this.clientX = base.clientX;
    this.clientY = base.clientY;
    this.screenX = base.screenX;
    this.screenY = base.screenY;
    this.button = base.button;
    this.buttons = base.buttons;
    this.ctrlKey = base.ctrlKey;
    this.altKey = base.altKey;
    this.shiftKey = base.shiftKey;
    this.metaKey = base.metaKey;
    this.relatedTarget = base.relatedTarget;
    this.movementX = base.movementX;
    this.movementY = base.movementY;
    this.offsetX = base.offsetX;
    this.offsetY = base.offsetY;
    this.pageX = base.pageX;
    this.pageY = base.pageY;
    this.x = base.x;
    this.y = base.y;
    this.getModifierState = (key) => base.getModifierState(key);
  }
  static {
    __name(this, "CustomMouseEvent");
  }
};
var CustomKeyboardEvent = class extends CustomEvent {
  constructor(name, detail, base) {
    super(name, {
      detail,
      bubbles: true,
      cancelable: true
    });
    this.altKey = base.altKey;
    this.charCode = base.charCode;
    this.code = base.code;
    this.ctrlKey = base.ctrlKey;
    this.isComposing = base.isComposing;
    this.key = base.key;
    this.keyCode = base.keyCode;
    this.location = base.location;
    this.metaKey = base.metaKey;
    this.repeat = base.repeat;
    this.shiftKey = base.shiftKey;
    this.getModifierState = (key) => base.getModifierState(key);
  }
  static {
    __name(this, "CustomKeyboardEvent");
  }
};
var CustomPointerEvent = class extends CustomEvent {
  constructor(name, detail, base) {
    super(name, {
      detail,
      bubbles: true,
      cancelable: true
    });
    this.height = base.height;
    this.isPrimary = base.isPrimary;
    this.pointerId = base.pointerId;
    this.pointerType = base.pointerType;
    this.pressure = base.pressure;
    this.tangentialPressure = base.tangentialPressure;
    this.tiltX = base.tiltX;
    this.tiltY = base.tiltY;
    this.twist = base.twist;
    this.width = base.width;
    this.getCoalescedEvents = () => base.getCoalescedEvents();
    this.getPredictedEvents = () => base.getPredictedEvents();
  }
  static {
    __name(this, "CustomPointerEvent");
  }
};
export {
  CustomKeyboardEvent,
  CustomMouseEvent,
  CustomPointerEvent
};
