export declare class CustomMouseEvent<T> extends CustomEvent<T> {
    readonly altKey: boolean;
    readonly button: number;
    readonly buttons: number;
    readonly clientX: number;
    readonly clientY: number;
    readonly ctrlKey: boolean;
    readonly metaKey: boolean;
    readonly movementX: number;
    readonly movementY: number;
    readonly offsetX: number;
    readonly offsetY: number;
    readonly pageX: number;
    readonly pageY: number;
    readonly relatedTarget: EventTarget | null;
    readonly screenX: number;
    readonly screenY: number;
    readonly shiftKey: boolean;
    readonly x: number;
    readonly y: number;
    getModifierState: (keyArg: string) => boolean;
    constructor(name: string, detail: T, base: MouseEvent);
}
export declare class CustomKeyboardEvent<T> extends CustomEvent<T> {
    readonly altKey: boolean;
    readonly charCode: number;
    readonly code: string;
    readonly ctrlKey: boolean;
    readonly isComposing: boolean;
    readonly key: string;
    readonly keyCode: number;
    readonly location: number;
    readonly metaKey: boolean;
    readonly repeat: boolean;
    readonly shiftKey: boolean;
    getModifierState: (keyArg: string) => boolean;
    constructor(name: string, detail: T, base: KeyboardEvent);
}
export declare class CustomPointerEvent<T> extends CustomEvent<T> {
    readonly height: number;
    readonly isPrimary: boolean;
    readonly pointerId: number;
    readonly pointerType: string;
    readonly pressure: number;
    readonly tangentialPressure: number;
    readonly tiltX: number;
    readonly tiltY: number;
    readonly twist: number;
    readonly width: number;
    getCoalescedEvents: () => PointerEvent[];
    getPredictedEvents: () => PointerEvent[];
    constructor(name: string, detail: T, base: PointerEvent);
}
