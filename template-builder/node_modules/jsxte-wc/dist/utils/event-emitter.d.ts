import { AllElementLifecycleEvents, ElementLifecycleEvent } from "../element/element-events";
type EventFor<EventType extends ElementLifecycleEvent> = Extract<AllElementLifecycleEvents, {
    type: EventType;
}>;
declare const EventEmitter_base: any;
export declare class EventEmitter extends EventEmitter_base {
    once<EventType extends ElementLifecycleEvent>(type: EventType, listener: (evt: EventFor<EventType>) => void, capture?: boolean): void;
    on<EventType extends ElementLifecycleEvent>(type: EventType, listener: (evt: EventFor<EventType>) => void, capture?: boolean): void;
    off<EventType extends ElementLifecycleEvent>(type: EventType, listener: (evt: EventFor<EventType>) => void): void;
    addEventListener<EventType extends ElementLifecycleEvent>(type: EventType, listener: (evt: EventFor<EventType>) => void, capture?: boolean): void;
    removeEventListener<EventType extends ElementLifecycleEvent>(type: EventType, listener: (evt: EventFor<EventType>) => void): void;
    dispatchEvent<EventType extends ElementLifecycleEvent>(event: EventFor<EventType>): boolean;
}
export {};
