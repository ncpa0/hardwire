"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/json-renderer/jsx-elem-to-json.ts
var jsx_elem_to_json_exports = {};
__export(jsx_elem_to_json_exports, {
  jsxElemToJsonAsync: () => jsxElemToJsonAsync,
  jsxElemToJsonSync: () => jsxElemToJsonSync
});
module.exports = __toCommonJS(jsx_elem_to_json_exports);
var import_component_api = require("../component-api/component-api.js");
var import_error_boundary = require("../error-boundary/error-boundary.js");
var import_get_html_struct = require("../html-parser/get-html-struct.js");
function assertSyncElem(e) {
}
var jsxElemToJsonSync = (element, _componentApi, options) => {
  switch (typeof element) {
    case "string":
      return element;
    case "bigint":
    case "number":
      return String(element);
    case "boolean":
    case "function":
    case "symbol":
    case "undefined":
      return "";
  }
  if (element === null)
    return "";
  const attributeMap = options?.attributeMap ?? {};
  const componentApi = _componentApi ? import_component_api.ComponentApi.clone(_componentApi) : import_component_api.ComponentApi.create(options);
  assertSyncElem(element);
  if (element.type === "textNode") {
    return element.text;
  }
  if (typeof element.tag !== "string") {
    if (import_error_boundary.ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = boundary.render(
          element.props,
          componentApi
        );
        if (subElem2 instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.render] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToJsonSync(subElem2, componentApi, {
          attributeMap
        });
      } catch (e) {
        const fallbackElem = boundary.onError(e, element.props, componentApi);
        if (fallbackElem instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.onError] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToJsonSync(fallbackElem, componentApi, {
          attributeMap
        });
      }
    }
    const subElem = element.tag(
      element.props,
      componentApi
    );
    if (subElem instanceof Promise) {
      throw new Error(
        `Encountered an async Component: [${element.tag.name}] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
      );
    }
    return jsxElemToJsonSync(subElem, componentApi, {
      attributeMap
    });
  } else {
    const htmlStruct = (0, import_get_html_struct.getHTMLStruct)(element, attributeMap);
    const r = {
      element: htmlStruct.tag,
      attributes: htmlStruct.attributes,
      children: []
    };
    for (let i = 0; i < htmlStruct.children.length; i++) {
      const child = htmlStruct.children[i];
      const rendered = jsxElemToJsonSync(child, componentApi, {
        attributeMap
      });
      r.children.push(rendered);
    }
    return r;
  }
};
var jsxElemToJsonAsync = async (element, _componentApi, options) => {
  switch (typeof element) {
    case "string":
      return element;
    case "bigint":
    case "number":
      return String(element);
    case "boolean":
    case "function":
    case "symbol":
    case "undefined":
      return "";
  }
  if (element === null)
    return "";
  const attributeMap = options?.attributeMap ?? {};
  const componentApi = _componentApi ? import_component_api.ComponentApi.clone(_componentApi) : import_component_api.ComponentApi.create(options);
  assertSyncElem(element);
  if (element.type === "textNode") {
    return element.text;
  }
  if (typeof element.tag !== "string") {
    if (import_error_boundary.ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = await boundary.render(
          element.props,
          componentApi
        );
        return await jsxElemToJsonAsync(subElem2, componentApi, {
          attributeMap
        });
      } catch (e) {
        const fallbackElem = await boundary.onError(
          e,
          element.props,
          componentApi
        );
        return await jsxElemToJsonAsync(fallbackElem, componentApi, {
          attributeMap
        });
      }
    }
    const subElem = await element.tag(
      element.props,
      componentApi
    );
    return await jsxElemToJsonAsync(subElem, componentApi, {
      attributeMap
    });
  } else {
    const htmlStruct = (0, import_get_html_struct.getHTMLStruct)(element, attributeMap);
    const r = {
      element: htmlStruct.tag,
      attributes: htmlStruct.attributes,
      children: []
    };
    for (let i = 0; i < htmlStruct.children.length; i++) {
      const child = htmlStruct.children[i];
      const rendered = await jsxElemToJsonAsync(child, componentApi, {
        attributeMap
      });
      r.children.push(rendered);
    }
    return r;
  }
};
